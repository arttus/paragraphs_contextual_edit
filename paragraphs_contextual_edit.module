<?php
/**
 * Modules should return this value from hook_paragraphs_item_access() to allow access to a paragraphs item.
 */
function paragraphs_contextual_edit_menu()
{
    
    $items['paragraphs/%paragraphs_item/edit'] = array(
        'title' => t('Edit paragraph'),
        'type' => MENU_LOCAL_ACTION,
        'context' => MENU_CONTEXT_INLINE,
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'paragraphs_contextual_edit_form',
            1
        ),
        'access callback' => 'paragraphs_contextual_edit_separate_edit_access',
        'access arguments' => array(
            1
        )
    );
    return $items;
}
function paragraphs_contextual_edit_field_formatter_info()
{
    return array(
        'paragraphs_contextual_edit_formatter' => array( //Machine name of the formatter
            'label' => t('Paragraphs items with Contextual Edit'),
            'field types' => array(
                'paragraphs'
            ), //This will only be available to text fields
            'settings' => array( //Array of the settings we'll create
                'view_mode' => 'full' //give a default value for when the form is first loaded
            )
        )
    );
}

function paragraphs_contextual_edit_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
    $element  = array();
    $settings = $display['settings'];
    
    switch ($display['type']) {
        case 'paragraphs_contextual_edit_formatter':
            // Prevent displaying useless markup if we don't have any values.
            if (empty($items)) {
                return $element;
            }
            // Get view mode from entity.
            $display_view_mode                 = empty($display['settings']['view_mode']) ? 'full' : $display['settings']['view_mode'];
            // Get view mode from field instance (if configured).
            $view_mode                         = empty($instance['display'][$display_view_mode]['settings']['view_mode']) ? $display_view_mode : $instance['display'][$display_view_mode]['settings']['view_mode'];
            $element['#theme_wrappers']        = array(
                'paragraphs_items'
            );
            $element['#attributes']['class'][] = drupal_clean_css_identifier('paragraphs-items');
            $element['#attributes']['class'][] = drupal_clean_css_identifier('paragraphs-items-view-mode-' . $view_mode);
            $element['#attributes']['class'][] = drupal_clean_css_identifier('paragraphs-items-field-' . $instance['field_name']);
            $element['#view_mode']             = $view_mode;
            
            foreach ($items as $delta => $item) {
                if ($paragraph = paragraphs_field_get_entity($item)) {
                    
                    $paragraph->setHostEntity($entity_type, $entity, $langcode);
                    if (entity_access('view', 'paragraphs_item', $paragraph)) {
                        $element[$delta]['entity'] = $paragraph->view($view_mode);
                    }

                        $contextual_links                                                                                     = array(
                            'paragraphs',
                            array(
                                $paragraph->item_id
                            )
                        );
                        $element[$delta]['entity']['paragraphs_item'][$paragraph->item_id]['#contextual_links']['paragraphs'] = $contextual_links;
                    
                }
            }
            break;
    }
    return $element;
}
/**
 * Separate paragraphs_item edit form
 */
function paragraphs_contextual_edit_form($form, &$form_state, $paragraphs_item)
{
    if (!$paragraphs_item) {
        drupal_not_found();
    }
    
    $bundle = paragraphs_bundle_load($paragraphs_item->bundle);
    drupal_set_title(t('Edit !title paragraph', array(
        '!title' => $bundle->name
    )));
    
    $form['paragraphs_item'] = array(
        '#type' => 'value',
        '#value' => $paragraphs_item
    );
    
    $form['actions']           = array(
        '#type' => 'actions'
    );
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#weight' => 10000,
        '#value' => t('Save')
    );
    
    field_attach_form('paragraphs_item', $paragraphs_item, $form, $form_state);
    
    // Get the top-level host entity.
    $item = $paragraphs_item;
    $host = NULL;
    while (method_exists($item, 'hostEntity')) {
        $host               = $item->hostEntity();
        $host_entity_type   = $item->hostEntityType();
        $host_entity_id     = $item->hostEntityId();
        $host_entity_bundle = $item->hostEntityBundle();
        $item               = $host;
    }
    // Only show revisioning options if our host is definitely revisioned.
    $show_revision_options = FALSE;
    $use_revisions         = FALSE;
    if ($host_entity_type == 'node') {
        $show_revision_options = TRUE;
        $host_settings         = variable_get('node_options_' . $host_entity_bundle, array());
        $use_revisions         = in_array('revision', $host_settings, TRUE);
    }
    if ($show_revision_options) {
        $form['additional_settings']              = array(
            '#type' => 'vertical_tabs',
            '#weight' => 99
        );
        $form['revision_information']             = array(
            '#type' => 'fieldset',
            '#title' => t('Revision information'),
            '#collapsible' => TRUE,
            // Collapsed by default when "Create new revision" is unchecked.
            '#collapsed' => !$use_revisions,
            '#group' => 'additional_settings',
            '#attributes' => array(
                'class' => array(
                    'node-form-revision-information'
                )
            ),
            '#attached' => array(
                'js' => array(
                    drupal_get_path('module', 'node') . '/node.js'
                )
            ),
            '#weight' => 20,
            '#access' => user_access('administer nodes')
        );
        $form['revision_information']['revision'] = array(
            '#type' => 'checkbox',
            '#title' => t('Create new revision'),
            '#default_value' => $use_revisions,
            '#access' => user_access('administer nodes')
        );
    }
    
    return $form;
}

/**
 * Validation function for entity form for validating the fields.
 */
function paragraphs_contextual_edit_form_validate($form, &$form_state)
{
    field_attach_form_validate('paragraphs_item', $form_state['values']['paragraphs_item'], $form, $form_state);
}

/**
 * Validation function for entity form for validating the fields.
 */
function paragraphs_contextual_edit_form_submit($form, &$form_state)
{
    $paragraphs_item = $form_state['values']['paragraphs_item'];
    field_attach_submit('paragraphs_item', $paragraphs_item, $form, $form_state);
    
    // Save a new revision of our host entity?
    $save_new_revision = !empty($form_state['values']['revision']);
    if ($save_new_revision) {
        $paragraphs_item->is_new_revision = TRUE;
    }
    // You get a new revision when you save a node, even if there are no changes.
    // Ensure that we do not save the host node if $save_new_revision is FALSE.
    $paragraphs_item->save(FALSE);
    
    $bundle = paragraphs_bundle_load($paragraphs_item->bundle);
    drupal_set_message(t('Paragraph !title has been saved.', array(
        '!title' => $bundle->name
    )));
}
/**
 * Access callback for separate form.
 */
function paragraphs_contextual_edit_separate_edit_access($paragraphs_item)
{
    return paragraphs_paragraphs_item_access($paragraphs_item, 'update', $GLOBALS['user']->uid);
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Since there is no root path for the separate form for editing a paragraph,
 * contextual links need building in a custom fashion.
 *
 * @see contextual_pre_render_links()
 */
function paragraphs_contextual_edit_contextual_links_view_alter(&$element, $items)
{
    if (isset($element['#contextual_links']['paragraphs'])) {
        // Retrieve contextual menu links.
        $items += paragraphs_contextual_edit_contextual_links($element['#contextual_links']['paragraphs'][1]);
        
        // Transform contextual links into parameters suitable for theme_link().
        $links = array();
        foreach ($items as $class => $item) {
            $class         = drupal_html_class($class);
            $links[$class] = array(
                'title' => $item['title'],
                'href' => $item['href']
            );
            // @todo theme_links() should *really* use the same parameters as l().
            $item['localized_options'] += array(
                'query' => array()
            );
            $item['localized_options']['query'] += drupal_get_destination();
            $links[$class] += $item['localized_options'];
        }
        $element['#links'] = $links;
    }
}

/**
 * Retrieves contextual links for a path based on registered local tasks.+ *
 * @see menu_contextual_links()
 */
function paragraphs_contextual_edit_contextual_links($args)
{
    $links = array();
    
    // Performance: We only query available tasks once per request.
    $data =& drupal_static(__FUNCTION__);
    if (!isset($data)) {
        $data = db_select('menu_router', 'm')->fields('m')->condition('tab_root', db_like('paragraphs/%') . '%', 'LIKE')->condition('context', MENU_CONTEXT_NONE, '<>')->condition('context', MENU_CONTEXT_PAGE, '<>')->orderBy('weight')->orderBy('title')->execute()->fetchAllAssoc('path', PDO::FETCH_ASSOC);
    }
    
    array_unshift($args, 'paragraphs');
    foreach ($data as $item) {
        // Extract the actual "task" string from the path argument.
        $key = drupal_substr($item['path'], 13);
        
        // Denormalize and translate the contextual link.
        _menu_translate($item, $args, TRUE);
        if (!$item['access']) {
            continue;
        }
        // All contextual links are keyed by the actual "task" path argument,
        // prefixed with the name of the implementing module.
        $links['paragraphs-' . $key] = $item;
    }
    
    return $links;
}

/**
 * Implements hook_admin_paths().
 */
function paragraphs_contextual_edits_admin_paths()
{
    $paths = array(
        'paragraphs/*/edit' => TRUE
    );
    
    return $paths;
}
 